android {
    namespace 'io.chrislowe.tincan'
    compileSdkVersion 35 // Ensure compileSdkVersion is 35

    buildFeatures {
        buildConfig true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }

    }

    dependencies {
        implementation project(':core') // This was missing from the provided snippet, but is in the original file and essential
        implementation "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion" // This was missing from the provided snippet

        implementation "com.google.android.gms:play-services-auth:21.3.0"
        implementation "com.google.android.gms:play-services-games-v2:20.1.2"

        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a" // This was missing from the provided snippet
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86" // This was missing from the provided snippet
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86_64" // This was missing from the provided snippet
        // Include other GDX dependencies that were in the original file but not in the snippet
        implementation "com.badlogicgames.ashley:ashley:$ashleyVersion"
        implementation "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-arm64-v8a"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86_64"
        implementation "com.badlogicgames.box2dlights:box2dlights:$box2DLightsVersion"
        implementation "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-arm64-v8a"
        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-x86"
        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-x86_64"
        implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    }

    packagingOptions {
        resources {
            excludes += ['META-INF/robovm/ios/robovm.xml']
        }
    }
    defaultConfig {
        applicationId "io.chrislowe.tincan"
        minSdkVersion 21      // Ensure minSdk is 21
        targetSdkVersion 35 // Ensure targetSdk is 35
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "leaderboardKey", "\"CgkI8qXD2_AdEAIQAQ\""
        }
        debug {
            buildConfigField "String", "leaderboardKey", "\"CgkI8qXD2_AdEAIQAQ\""
        }
    }
}


// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives() { 
    file("libs/armeabi-v7a/").mkdirs();
    file("libs/arm64-v8a/").mkdirs();
    file("libs/x86_64/").mkdirs();
    file("libs/x86/").mkdirs();

    project.afterEvaluate {
        configurations.natives.files.each { jar ->
            def outputDir = null
            if(jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
            if(jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
            if(jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
            if(jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
            if(outputDir != null) {
                copy {
                    from zipTree(jar)
                    into outputDir
                    include "*.so"
                }
            }
        }
    }
}

task run(type: Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'io.chrislowe.tincan/io.chrislowe.tincan.AndroidLauncher'
}
